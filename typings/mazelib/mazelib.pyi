"""
This type stub file was generated by pyright.
"""

class Maze:
    """This is a primary object meant to hold a rectangular, 2D maze.
    This object includes the methods used to generate and solve the maze,
    as well as the start and end points.
    """
    def __init__(self, seed=...) -> None:
        ...
    
    @staticmethod
    def set_seed(seed): # -> None:
        """Helper method to set the random seeds for all the random seed for all the random libraries we are using.

        Args:
            seed (int): random seed number
        Returns: None
        """
        ...
    
    def generate(self): # -> None:
        """Public method to generate a new maze, and handle some clean-up."""
        ...
    
    def generate_entrances(self, start_outer=..., end_outer=...): # -> None:
        """Generate maze entrances. Entrances can be on the walls, or inside the maze.

        Args:
            start_outer (bool): Do you want the start of the maze to be on an outer wall?
            end_outer (bool): Do you want the end of the maze to be on an outer wall?
        Returns: None
        """
        ...
    
    def generate_monte_carlo(self, repeat, entrances=..., difficulty=..., reducer=...): # -> None:
        """Use the Monte Carlo method to generate a maze of defined difficulty.

        This method assumes the generator and solver algorithms are already set.

        1. Generate a maze.
        2. For each maze, generate a series of entrances.
        3. To eliminate boring entrance choices, select only the entrances
            that yield the longest solution to a given maze.
        4. Repeat steps 1 through 3 for several mazes.
        5. Order the mazes based on a reduction function applied to their maximal
            solutions. By default, this reducer will return the solution length.
        6. Based on the 'difficulty' parameter, select one of the mazes.

        Args:
            repeat (int): How many mazes do you want to generate?
            entrances (int): How many different entrance combinations do you want to try?
            difficulty (float): How difficult do you want the final maze to be (zero to one).
            reducer (function): How do you want to determine solution difficulty (default is length).
        Returns: None
        """
        ...
    
    def transmute(self): # -> None:
        """Transmute an existing maze grid."""
        ...
    
    def solve(self): # -> None:
        """Public method to solve a new maze, if possible.

        Returns: None
        """
        ...
    
    def tostring(self, entrances=..., solutions=...): # -> LiteralString | Literal['']:
        """Return a string representation of the maze.
        This can also display the maze entrances/solutions IF they already exist.

        Args:
            entrances (bool): Do you want to show the entrances of the maze?
            solutions (bool): Do you want to show the solution to the maze?
        Returns:
            str: string representation of the maze
        """
        ...
    
    def __str__(self) -> str:
        """Display maze walls, entrances, and solutions, if available.

        Returns
        -------
            str: string representation of the maze
        """
        ...
    
    def __repr__(self): # -> LiteralString | Literal['']:
        """Display maze walls, entrances, and solutions, if available.

        Returns
        -------
            str: string representation of the maze
        """
        ...
    


